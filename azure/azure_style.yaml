parameters:
  - name: REPO_NAME
    type: string
  # The following parameters have defaults because this template could be used by repos directly
  - name: TIMEOUT
    type: number
    default: 10
  - name: IGNORE_STYLE
    type: boolean
    default: false
  - name: BASE_FORMAT_AND_LINT
    type: boolean
    default: true
  - name: ISORT
    type: boolean
    default: false
  - name: PYLINT
    type: boolean
    default: false
  - name: CLANG_FORMAT
    type: boolean
    default: false
  - name: FPRETTIFY
    type: boolean
    default: false
jobs:
  - job: base_format_and_lint
    pool:
      vmImage: "ubuntu-22.04"
    timeoutInMinutes: ${{ parameters.TIMEOUT }}
    continueOnError: ${{ parameters.IGNORE_STYLE }}
    condition: ${{ parameters.BASE_FORMAT_AND_LINT }}
    steps:
      - checkout: self
      - checkout: azure_template
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.11"
      - script: |
          cd ${{ parameters.REPO_NAME }}
          cp ../.github/.pre-commit-config.yaml .
          pip install pre-commit

          # Set the ruff config in the .github repo as the global config, then the local config should extend it by including the line `extend = "~/.config/ruff/ruff.toml"`
          mkdir -p ~/.config/ruff
          cp ../.github/ruff.toml ~/.config/ruff/ruff.toml

          echo "Ruff config:"
          cat ~/.config/ruff/ruff.toml
          if [[ -f "ruff.toml" ]]; then
              cat ruff.toml
          fi

          # Run the pre-commit checks
          pre-commit run --all-files --show-diff-on-failure

  - job: isort
    pool:
      vmImage: "ubuntu-22.04"
    timeoutInMinutes: ${{ parameters.TIMEOUT }}
    continueOnError: ${{ parameters.IGNORE_STYLE }}
    condition: ${{ parameters.ISORT }}
    steps:
      - checkout: self
      - checkout: azure_template
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.11"
      - script: |
          cd ${{ parameters.REPO_NAME }}

          # copy over the isort config file
          if [[ ! -f ".isort.cfg" ]]; then
            cp ../.github/.isort.cfg .
          fi

          pip install wheel
          pip install isort
          isort . -c

  - job: pylint
    pool:
      vmImage: "ubuntu-22.04"
    timeoutInMinutes: ${{ parameters.TIMEOUT }}
    continueOnError: ${{ parameters.IGNORE_STYLE }}
    condition: ${{ parameters.PYLINT }}
    steps:
      - checkout: self
      - checkout: azure_template
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.11"
      - script: |
          cd ${{ parameters.REPO_NAME }}

          # copy over the pylint config file
          cp ../.github/.pylintrc .

          pip install pylint
          find . -type f -name "*.py" -not -path "*/doc/*" | xargs pylint

  - job: clang_format
    pool:
      vmImage: "ubuntu-22.04"
    timeoutInMinutes: ${{ parameters.TIMEOUT }}
    continueOnError: ${{ parameters.IGNORE_STYLE }}
    condition: ${{ parameters.CLANG_FORMAT }}
    steps:
      - checkout: self
      - checkout: azure_template
      - script: |
          # Install prerequisites
          sudo apt-get install clang-format-10 -y

          cd ${{ parameters.REPO_NAME }}

          # Check if we can access script, if not exit
          if [[ ! -f ../.github/azure/clang-format.sh ]]; then
            echo "clang-format.sh not found. Exiting."
            exit 1
          fi

          # Run the formatting
          bash ../.github/azure/clang-format.sh --dry-run || exit $?

  - job: fprettify
    pool:
      vmImage: "ubuntu-22.04"
    timeoutInMinutes: ${{ parameters.TIMEOUT }}
    continueOnError: ${{ parameters.IGNORE_STYLE }}
    condition: ${{ parameters.FPRETTIFY }}
    steps:
      - checkout: self
      - checkout: azure_template
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.11"
      - script: |
          cd ${{ parameters.REPO_NAME }}

          # Check if we can access script, if not exit
          if [[ ! -f ../.github/azure/fprettify.sh ]]; then
            echo "fprettify.sh not found. Exiting."
            exit 1
          fi

          # Install fprettify
          pip install fprettify==0.3.7

          # Run the formatting
          bash ../.github/azure/fprettify.sh || exit $?

          # Exit with an error if any of the tracked files changed
          git diff --summary --exit-code


